@page "/authors/update/{Id:int}"
@attribute [Authorize(Roles = "Admin")]

@inject IAuthorService authorService
@inject NavigationManager _navManager



<h3 class = "card-title">Edit Author</h3>
<hr/>
<br/>
@if (!isSuccess)
{
  <ErrorMessage Message = "Something Went Wrong With the Operation"/>
}


<EditForm Model = "Author" OnValidSubmit = "HandleUpdateAuthor">
  <DataAnnotationsValidator/>
  <ValidationSummary/>
  <div class = "form-group">
    <label for = "firstname">First Name</label>
    <InputText @bind-Value= "Author.FirstName" class = "form-control" id = "firstname"/>
  </div>
  <div class = "form-group">
    <label for = "lastname">Last Name</label>
    <InputText @bind-Value= "Author.LastName" class = "form-control" id = "lastname"/>
  </div>
  <div class = "form-group">
    <label for = "bio">Biography</label>
    <InputTextArea @bind-Value= "Author.Bio" class = "form-control" id = "bio"/>
  </div>
  <button class = "btn btn-primary" type = "submit">
    <span class = "oi oi-pencil"></span>
    Create Author
  </button>
  <button @onclick= "BackToList" class = "btn btn-outline-secondary">
    <span class = "oi oi-media-skip-backward"></span>
    Back To List
  </button>
</EditForm>

@code{
  [Parameter]
  public int Id { get; set; }
  private AuthorUpdateDto Author = new AuthorUpdateDto();
  private bool isSuccess = true;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var response = await authorService.GetForUpdate(Id);
      if (response.Success)
      {
        Author = response.Data;
      }
    }
    catch (Exception ex)
    {
     
    }
  }

  private async Task HandleUpdateAuthor()
  {
    var response = await authorService.Edit(Id, Author);
    if (response.Success)
    {
      BackToList();
    }
  }

  private void BackToList()
  {
    _navManager.NavigateTo("/authors/");
  }

}